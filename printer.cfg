# This file contains common pin mappings for RAMPS (v1.3 and later)
# boards. RAMPS boards typically use a firmware compiled for the AVR
# atmega2560 (though other AVR chips are also possible).

# See the example.cfg file for a description of available parameters.

#######################
### INCLUDE CONFIGS ###
#######################
[include pause_resume_m600.cfg]
[include bed_mesh.cfg]
[include heatsoak.cfg]
[include GET_PROBE_LIMITS.cfg]
[include purgetest.cfg]
#[include mainsail.cfg]
[include config_backup.cfg]
[respond]

[exclude_object]

[gcode_macro MR_NOTIFY]
description: Allows you to send a custom notification via Mobileraker without using the M117 command
gcode:
    {% set msg = "MR_NOTIFY:" ~ (params.TITLE ~ "|" if 'TITLE' in params|upper else "") ~ params.MESSAGE %}

    {% if 'MESSAGE' in params|upper %}
        { action_respond_info(msg) }
    {% else %}
        { action_raise_error('Must provide MESSAGE parameter') }
    {% endif %}


[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}
[display_status]
[virtual_sdcard]
path: ~/printer_data/gcodes
on_error_gcode: CANCEL_PRINT


########################################
# KINEMATICS CONFIG
#######################################
[printer]
kinematics: cartesian
max_velocity: 200
max_accel: 1500
#max_accel_to_decel: 7000
max_z_velocity: 10
max_z_accel: 100
square_corner_velocity: 5

[input_shaper]
#shaper_freq_x: 48.6  # frequency for the X mark of the test model
#shaper_type_x: 3hump_ei
#shaper_freq_y: 96.6  # frequency for the Y mark of the test model
#shaper_type_y: mzv

[force_move]
enable_force_move: true

[gcode_macro force_Z]
gcode:
 {% if printer.idle_timeout.state == "Printing" %}
 { action_respond_info("Stampante occupata!") }
 {% else %}
 SET_KINEMATIC_POSITION z=180
 { action_respond_info("POSIZIONE Z SETTATA") }
 {% endif %}

########################################
# BLTOUCH
#######################################
[bltouch]
sensor_pin: ^ar18
control_pin: ar4
#z_offset: 2.38
#Se aumento valore la distanza diminuisce (più schiacciato) 
y_offset: -4
x_offset: -40
pin_up_reports_not_triggered: True
pin_move_time: 0.4
lift_speed: 3
speed: 3
samples_result: average

########################################
# BED MESH
#######################################
[gcode_macro G29]
gcode: 
    {% set max_x = printer.toolhead.axis_maximum.x %}
    {% set max_y = printer.toolhead.axis_maximum.y %}
 {% if printer.idle_timeout.state == "Printing" %}
 { action_respond_info("Stampante occupata!") }
 {% else %}
 SET_LED LED=light_led white=1
 HOME_ALL
 BED_MESH_CLEAR
 BED_MESH_CALIBRATE
 BED_MESH_OUTPUT
 G90
 G0 X{max_x -1} Y{max_y -1} F7000
 {% endif %}

########################################
# BED MESH DEFINE POINTS
#######################################
[bed_mesh]
mesh_min: 20,20
mesh_max: 177,180
probe_count: 5,5
mesh_pps: 2, 2
algorithm: bicubic
bicubic_tension: 0.2
speed: 180
horizontal_move_z: 4
faulty_region_1_min: 0.0, 0.0 # Avoid Four Corner Screws
faulty_region_1_max: 20.0, 9.0
faulty_region_2_min: 180.0, 0.0
faulty_region_2_max: 200.0, 9.0
faulty_region_3_min: 200.0, 200.0
faulty_region_3_max: 180.0, 189.0
faulty_region_4_min: 20.0, 200.0
faulty_region_4_max: 0.0, 189.0

########################################
# CUSTOM HOMING
########################################

[gcode_macro HOME_ALL]
gcode: 
 SET_LED LED=light_led white=1
 {% if printer.idle_timeout.state == "Printing" %}
 { action_respond_info("Stampante occupata!") }
 {% else %}
 G28 XYZ
 G90
 PARK
 {% endif %}
 
[gcode_macro HOME_START]
gcode: 
 G28 XYZ
 G90
 PARK
 
[safe_z_home]
#home_xy_position: -18,-9
home_xy_position: 140,100
speed: 100.0
z_hop: 5
z_hop_speed: 3
move_to_previous: False

########################################
# SKEW CORRECTION
#######################################
[skew_correction]


########################################
# PARK HEAD
#######################################
[gcode_macro PARK]
gcode:
    {% set max_x = printer.toolhead.axis_maximum.x %}
    {% set min_x = printer.toolhead.axis_minimum.x %}
    {% set max_y = printer.toolhead.axis_maximum.y %}
    G0 X{max_x -1} Y{max_y -1} F7000
    
[gcode_macro PARK_FRONT]
gcode:
    {% set min_x = printer.toolhead.axis_minimum.x %}
    {% set min_y = printer.toolhead.axis_minimum.y %}
    G0 X{min_x + 1} Y{min_y + 1} F7000


########################################
# START END MACRO
#######################################    
    
[gcode_macro START_PRINT]
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
gcode:
    {% set max_x = printer.toolhead.axis_maximum.x %}
    {% set max_y = printer.toolhead.axis_maximum.y %}
    {% set min_y = printer.toolhead.axis_minimum.y %}
    {% set BED_TEMP = params.BED_TEMP|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|float %}
    {% set bed_type = params.BED_TYPE|default('') %}
    {% set filament_type = params.FILAMENT_TYPE %}
    {% set z_offset = 0 %}
    
    SET_LED LED=light_led white=1
    SET_FILAMENT_SENSOR SENSOR=switch ENABLE=1
    M104 S0
    M140 S0
    SKEW_PROFILE LOAD=skewdav
    M220 S100
    CLEAR_PAUSE
    SET_LED LED=barcled RED=0 GREEN=0 BLUE=0.3
    SET_GCODE_OFFSET Z_ADJUST=0
    {% if bed_type == 'Textured PEI Plate' %}
    {% set z_offset = -0.1 %}
    {% else %}
        {% set z_offset = 0 %}
    {% endif %}
    M118 'adjusting z height for {bed_type} : {z_offset}mm'
    SET_GCODE_OFFSET Z={z_offset}
    M117 Preheating...
    M140 S{BED_TEMP}     # Start bed heating
    M104 S{EXTRUDER_TEMP / 2} # Start extruder half heating
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP} MAXIMUM={BED_TEMP + 1} # Wait for bed to reach temperature
    BEEP I=1 DUR=80 FREQ=600
    HOME_START
    {% if filament_type == 'ABS'or filament_type == 'ASA' %}                  #ABS z_offset
    { action_respond_info("ABS or ASA Filament") }
        SET_GCODE_OFFSET Z_ADJUST=0.0 MOVE=1
        BEEP I=2 DUR=100 FREQ=900
    {% endif %}
    {% if filament_type == 'PET' or filament_type == 'PETG' %}                  #PETG z_offset
        { action_respond_info("PETG Filament") }
        SET_GCODE_OFFSET Z_ADJUST=0.0 MOVE=1
        BEEP I=1 DUR=100 FREQ=900
    {% endif %}
    CHECK_FILAMENT
    M117 Mesh Probing...
    BED_MESH_CLEAR
    BED_MESH_PROFILE REMOVE=default
    BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}
    BED_MESH_PROFILE LOAD=default
    BED_MESH_OUTPUT
    G90
    PARK_FRONT
    BEEP I=2 DUR=100 FREQ=1500
    M117 Heating extr...
    M109 S{EXTRUDER_TEMP}
    SET_LED LED=barcled RED=0 GREEN=0.3 BLUE=0
    M117 Starting...
    START_SOUND
    G1 Z10
    G92 E0
    M83 ; SET RELATIVE EXTRUDER
    SET_IDLE_TIMEOUT TIMEOUT=600
    _ADAPTIVE_PURGE
    M117
     
    
[gcode_macro END_PRINT]
gcode:
    {% set zend = params.Z|default(10)|int %} 
    {% set max_z = printer.toolhead.axis_maximum.z %}
    {% set z_safe = [printer.toolhead.position.z + 100, max_z]|min %}
    {% if (printer.gcode_move.position.z + zend) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{zend} F300                                                                     ; raise Z up by z hop amount
        {% else %}
         { action_respond_info("End Print zhop exceeds maximum Z height.") }
    {% endif %}
    SET_LED LED=barcled RED=0 GREEN=0 BLUE=0.
    BED_MESH_CLEAR
    SET_SKEW CLEAR=1
    M83 ; SET RELATIVE EXTRUDER
    G92 E0 ; reset Extrusion
    G1 E-2 F2500; retract 2mm at speed
    G90 ; set absolute movements
    PARK
    G0 Z{z_safe}
    M104 S0 ; turn off extruder
    #M140 S0 ; turn off bed
    M106 S0 ; turn off fan
    SET_GCODE_OFFSET Z_ADJUST=0
    {% if printer.heater_bed.temperature > 60 %}
        M118 Start gradual bed cooling ({printer.heater_bed.temperature}C).
        M118 reduce temp to ({printer.heater_bed.temperature - 5 }C).
        UPDATE_DELAYED_GCODE ID=gradual_cooldown DURATION=300
        {% else %}
        M118 No Gradual bed cooling necessary ({printer.heater_bed.temperature}C).
    	M140 S0 ; turn off bed
    	M84 ; disable motors
        M82 ; set absolute extruder
        M117 Finito!
        BEEP I=3 DUR=100 FREQ=300
        M117
        SET_FILAMENT_SENSOR SENSOR=switch ENABLE=0
        M118 Print Complete!
        {% endif %}
    
    
    
[delayed_gcode gradual_cooldown]
gcode:
    {% if printer.heater_bed.target > 40 %}
        M118 reduce temp to ({printer.heater_bed.target - 5 }C).
        M140 S{ printer.heater_bed.target - 5 }
        UPDATE_DELAYED_GCODE ID=gradual_cooldown DURATION=300
    {% else %}
        M118 Gradual bed cooling finished ({printer.heater_bed.temperature}C).
    	M140 S0 ; turn off bed
        M118 Print Complete!
    {% endif %}

########################################
# UNKNOW COMMAND
#######################################
[gcode_macro T0]
gcode: 

[gcode_macro T1]
gcode:

[gcode_macro M108]
gcode:

########################################
# PAUSE AND RESUME FUNCTIONS AND FILAMENT SENSOR
#######################################
[pause_resume]
recover_velocity: 180

[gcode_macro CHECK_FILAMENT]
gcode:
  {% if printer['filament_switch_sensor switch'].filament_detected != True %}
   { action_raise_error("No filament present, aborting print")}
  {% endif %}

[filament_switch_sensor switch]
switch_pin: !ar5
pause_on_runout: True
event_delay: 20.0
pause_delay: 1
runout_gcode: 
    M600
insert_gcode:
    BEEP I=2 DUR=80 FREQ=800
    
[gcode_macro FILAMENT_LOAD]
gcode:
 {% if printer.idle_timeout.state == "Printing" %}
 { action_respond_info("Stampante occupata!") }
 {% else %}
    M117 Loading...
    M83
    G92 E0.0
    G1 E90 F200
    G1 E10 F150
    G1 E-1 F800
    G92 E0.0
    M82
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0 
    M117
   {% endif %}
   

[gcode_macro FILAMENT_UNLOAD]
gcode:
    {% if printer.idle_timeout.state == "Printing" %}
    { action_respond_info("Stampante occupata!") }
    {% else %}
    M117 Unloading...
    M83
    G92 E0.0
    G1 E10 F200
    G1 E-10 F3000
    G1 E-10 F1400
    G1 E-80 F900
    G92 E0.0
    M82
    M117
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0     
   {% endif %}   

 
########################################
# LCD
#######################################
[display]
lcd_type: st7920
cs_pin: PH1
sclk_pin: PA1
sid_pin: PH0
encoder_pins: ^PC6, ^PC4
click_pin: ^!PC2
kill_pin: ^!PG0

########################################
# STEPPER CONFIG
#######################################
[stepper_x]
step_pin: ar54
dir_pin: ar55
microsteps: 64
enable_pin: !ar38
#step_distance: 0.0125
rotation_distance: 40
endstop_pin: !ar3
#position_min: -60
position_endstop: 218
position_min: -1
position_max: 218
homing_speed: 50

[tmc2130 stepper_x]
#Motor coil 2,73mH, motor res 2ohm
cs_pin: ar63
interpolate: False
#run_current: 0.700 original stepper
run_current: 0.976
#hold_current: 0.700
sense_resistor: 0.110
#driver_TOFF: 3 original stepper
#driver_TBL: 2 original stepper
#driver_HEND: 0 original stepper
#driver_HSTRT: 0 original stepper
driver_TBL: 1
driver_TOFF: 3 
driver_HSTRT: 0
driver_HEND: 3 
driver_PWM_AUTOSCALE: True
driver_PWM_AMPL: 128
stealthchop_threshold: 0

[stepper_y]
step_pin: ar60
dir_pin: ar61
enable_pin: !ar56
microsteps: 64
#step_distance: 0.0125
rotation_distance: 40
endstop_pin: !ar14
#position_min: -9
position_endstop: 205
position_min: -0.5
position_max: 205
homing_speed: 50

[tmc2130 stepper_y]
#Motor coil 2,73mH, motor res 2ohm
cs_pin: ar40
interpolate: False
#run_current: 0.750 original stepper
run_current: 0.976
#hold_current: 0.750
sense_resistor: 0.110
#driver_TOFF: 3 original stepper
#driver_TBL: 2 original stepper
#driver_HEND: 0 original stepper
#driver_HSTRT: 0 original stepper
driver_TBL: 1
driver_TOFF: 3 
driver_HSTRT: 0
driver_HEND: 3 
driver_PWM_AUTOSCALE: True
driver_PWM_AMPL: 128
stealthchop_threshold: 0

[stepper_z]
step_pin: ar46
dir_pin: ar48
enable_pin: !ar62
microsteps: 16
#step_distance: 0.0015625
#step_distance: 0.01
rotation_distance: 8
#endstop_pin: !ar18
position_min: -2
#position_endstop: -4
endstop_pin: probe:z_virtual_endstop
position_max: 180

[tmc2130 stepper_z]
cs_pin: ar42
interpolate: False
run_current: 0.700 
#hold_current: 0.750
sense_resistor: 0.110
#driver_IHOLDDELAY: 8
#driver_TPOWERDOWN: 0
driver_TBL: 1
driver_TOFF: 3 
driver_HSTRT: 0
driver_HEND: 3 
driver_PWM_AUTOSCALE: True
driver_PWM_AMPL: 128
stealthchop_threshold: 999

[extruder]
step_pin: ar26
dir_pin: ar28
enable_pin: !ar24
microsteps: 16
max_extrude_only_distance: 200
max_extrude_cross_section: 5
#418 teorici ultimi misurati 416.67
#step_distance: 0.002399
gear_ratio: 50:17
rotation_distance: 22.302
nozzle_diameter: 0.4
filament_diameter: 1.750
heater_pin: ar10
sensor_type: ATC Semitec 104GT-2
sensor_pin: analog13
min_extrude_temp: 0
max_power: 0.96
#max_extrude_only_accel: 1000
smooth_time: 0.4
#control: pid
#pid_Kp=28.316 
#pid_Ki=1.329 
#pid_Kd=150.783
min_temp: 0
max_temp: 275

[tmc2130 extruder]
#Motor coil 6,88mH, motor res 6,3ohm
cs_pin: ar65
#interpolate: True
run_current: 0.550
#hold_current: 0.700
sense_resistor: 0.110
#driver_IHOLDDELAY: 8
#driver_TPOWERDOWN: 0
driver_TBL: 1
driver_TOFF: 3 
driver_HSTRT: 0
driver_HEND: 0 
driver_PWM_AUTOSCALE: True
driver_PWM_AMPL: 128
stealthchop_threshold: 0

########################################
# BED THERMISTOR
#######################################
[verify_heater heater_bed]
check_gain_time: 120
#   This controls heater verification during initial heating. Smaller
#   values result in stricter checking and larger values allow for
#   more time before an error is reported. Specifically, during
#   initial heating, as long as the heater increases in temperature
#   within this time frame (specified in seconds) then the internal
#   "error counter" is reset. The default is 20 seconds for extruders
#   and 60 seconds for heater_bed.
max_error: 1000
hysteresis: 5
heating_gain: 1

[heater_bed]
heater_pin: ar8
sensor_type: EPCOS 100K B57560G104F
pullup_resistor: 4700
sensor_pin: analog14
max_power: 1
smooth_time: 5
#control: pid
#pid_Kp: 74.154
#pid_Ki: 0.828 
#pid_Kd: 1660.123
min_temp: 1
max_temp: 125

########################################
# FANS CONFIG
#######################################
[fan]
pin: ar9
max_power: 1.0
cycle_time: 0.010
kick_start_time: 0.100
shutdown_speed: 0

[heater_fan hotend_fan]
pin: ar6
kick_start_time: 0.100
heater: extruder
heater_temp: 40
shutdown_speed: 0

[controller_fan ramps_controller_fan]
pin: ar11
kick_start_time: 0.100
#heater_temp: 40
heater: heater_bed
max_power: 0.2
shutdown_speed: 0
idle_speed: 0.2

[temperature_sensor chamber]
sensor_type: EPCOS 100K B57560G104F ;Generic 3950
sensor_pin: PK7
min_temp: 0
max_temp: 90
gcode_id: C

########################################
# M300 CONFIG
#######################################

[pwm_cycle_time beeper]
pin: PC0
value: 0
shutdown_value: 0
#pwm: True
cycle_time: 0.0005 ; Default beeper tone in kHz. 1 / 0.0005 = 2000Hz (2kHz)

#USAGE:
#BEEP: Beep once with defaults.
#BEEP I=3: Beep 3 times with defaults.
#BEEP I=3 DUR=200 FREQ=2000: Beep 3 times, for 200ms each, at 2kHz frequency.
[gcode_macro BEEP]
gcode:
    # Parameters
    {% set i = params.I|default(1)|int %}           ; Iterations (number of times to beep).
    {% set dur = params.DUR|default(100)|int %}     ; Duration/wait of each beep in ms. Default 100ms.
    {% set freq = params.FREQ|default(2000)|int %}  ; Frequency in Hz. Default 2kHz.

    {% for iteration in range(i|int) %}
        SET_PIN PIN=beeper VALUE=.1 CYCLE_TIME={1.0/freq if freq > 0 else 1}
        G4 P{dur}
        SET_PIN PIN=beeper VALUE=0
        G4 P{dur}
    {% endfor %}
    
[gcode_macro START_SOUND]
gcode:
    BEEP I=1 DUR=300 FREQ=466
    BEEP I=1 DUR=300 FREQ=698
    BEEP I=1 DUR=300 FREQ=392
    BEEP I=1 DUR=1000 FREQ=659
    

########################################
# TWIST CONNECTION
#######################################
[axis_twist_compensation]
#speed: 80
#   The speed (in mm/s) of non-probing moves during the calibration.
#   The default is 50.
#horizontal_move_z: 5
#   The height (in mm) that the head should be commanded to move to
#   just prior to starting a probe operation. The default is 5.
calibrate_start_x: 20
#   Defines the minimum X coordinate of the calibration
#   This should be the X coordinate that positions the nozzle at the starting
#   calibration position. This parameter must be provided.
calibrate_end_x: 176
#   Defines the maximum X coordinate of the calibration
#   This should be the X coordinate that positions the nozzle at the ending
#   calibration position. This parameter must be provided.
calibrate_y: 112.5
#   Defines the Y coordinate of the calibration
#   This should be the Y coordinate that positions the nozzle during the
#   calibration process. This parameter must be provided and is recommended to
#   be near the center of the bed    

########################################
# MCU CONNECTION
#######################################
[mcu]
serial: /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0

[mcu rpi]
serial: /tmp/klipper_host_mcu

[adxl345]
cs_pin: rpi:None

[resonance_tester]
accel_chip: adxl345
probe_points:
  100,100,1 # an example
    
[screws_tilt_adjust]
screw1: 60, 10
screw1_name: front left screw
screw2: 215, 10
screw2_name: front right screw
screw3: 60, 190
screw3_name: rear right screw
screw4: 215, 190
screw4_name: rear left screw
horizontal_move_z: 5
speed: 80
screw_thread: CW-M3

[bed_screws]
screw1: 0, 0
screw2: 200, 0
screw3: 200, 200
screw4: 0, 200

########################################
# LED CONFIG v2
#######################################
[led barcled]
red_pin: ar59
green_pin: ar64
blue_pin: ar44
cycle_time: 0.010
hardware_pwm: False
initial_RED: 0.0
initial_GREEN: 0.0
initial_BLUE: 0.

[led light_led]
white_pin: ar66
cycle_time: 0.010
hardware_pwm: False
initial_WHITE: 0.0

########################################
# LED MACRO
#######################################
[gcode_macro LEDON]
gcode:
  SET_LED LED=light_led white=0.7

[gcode_macro LEDOFF]
gcode:
  SET_LED LED=light_led white=0

########################################
# spoolman
#######################################
[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}

########################################
# BOARD PINS
#######################################
# Common EXP1 / EXP2 (display) pins
# Common EXP1 / EXP2 (display) pins
[board_pins arduino-mega]
aliases:
    ar0=PE0, ar1=PE1, ar2=PE4, ar3=PE5, ar4=PG5,
    ar5=PE3, ar6=PH3, ar7=PH4, ar8=PH5, ar9=PH6,
    ar10=PB4, ar11=PB5, ar12=PB6, ar13=PB7, ar14=PJ1,
    ar15=PJ0, ar16=PH1, ar17=PH0, ar18=PD3, ar19=PD2,
    ar20=PD1, ar21=PD0, ar22=PA0, ar23=PA1, ar24=PA2,
    ar25=PA3, ar26=PA4, ar27=PA5, ar28=PA6, ar29=PA7,
    ar30=PC7, ar31=PC6, ar32=PC5, ar33=PC4, ar34=PC3,
    ar35=PC2, ar36=PC1, ar37=PC0, ar38=PD7, ar39=PG2,
    ar40=PG1, ar41=PG0, ar42=PL7, ar43=PL6, ar44=PL5,
    ar45=PL4, ar46=PL3, ar47=PL2, ar48=PL1, ar49=PL0,
    ar50=PB3, ar51=PB2, ar52=PB1, ar53=PB0, ar54=PF0,
    ar55=PF1, ar56=PF2, ar57=PF3, ar58=PF4, ar59=PF5,
    ar60=PF6, ar61=PF7, ar62=PK0, ar63=PK1, ar64=PK2,
    ar65=PK3, ar66=PK4, ar67=PK5, ar68=PK6, ar69=PK7,
    analog0=PF0, analog1=PF1, analog2=PF2, analog3=PF3, analog4=PF4,
    analog5=PF5, analog6=PF6, analog7=PF7, analog8=PK0, analog9=PK1,
    analog10=PK2, analog11=PK3, analog12=PK4, analog13=PK5, analog14=PK6,
    analog15=PK7



    
    
    
    

# See the sample-lcd.cfg file for definitions of common LCD displays.

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [bltouch]
#*# z_offset = 2.4
#*#
#*# [input_shaper]
#*# shaper_type_x = mzv
#*# shaper_freq_x = 23.2
#*# shaper_type_y = zv
#*# shaper_freq_y = 100.0
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 74.497
#*# pid_ki = 0.641
#*# pid_kd = 2165.068
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 30.467
#*# pid_ki = 1.638
#*# pid_kd = 141.671
#*#
#*# [skew_correction skewdav]
#*# xy_skew = 0.00141443752337
#*# xz_skew = 0.0
#*# yz_skew = 0.0
#*#
#*# [axis_twist_compensation]
#*# z_compensations = 0.012500, -0.010000, -0.002500
#*# compensation_start_x = 20.0
#*# compensation_end_x = 176.0
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# tension = 0.2
#*# min_x = 20.0
#*# algo = bicubic
#*# y_count = 5
#*# mesh_y_pps = 2
#*# min_y = 20.0
#*# x_count = 5
#*# max_y = 180.0
#*# mesh_x_pps = 2
#*# max_x = 177.0
